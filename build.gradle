plugins {
// Build Java: https://docs.gradle.org/current/userguide/building_java_projects.html
    id 'java'

// https://docs.gradle.org/current/userguide/pmd_plugin.html#header
    id 'pmd'

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'
}

group 'cs5700seaF23'
version '1.0'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation 'org.testng:testng:7.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation name: 'assignment_yty-1.0'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.mockito:mockito-core:1.10.19'
}

pmd {
    ignoreFailures=true
    pmdTest.enabled=false
    ruleSets = [
            "category/java/bestpractices.xml",
            "category/java/errorprone.xml",
            "category/java/codestyle.xml"
            //"java-basic",
            //"java-braces",
            //"java-strings",
    ]
}

javadoc {
    doLast {
        String fixedBuildDir = buildDir.toString().replace('\\', '/')
        println "file:///$fixedBuildDir/docs/javadoc/index.html"
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        html.destination file("${buildDir}/jacocoHtml")
    }
    doLast {
        String fixedBuildDir = buildDir.toString().replace('\\', '/')
        println "file:///$fixedBuildDir/jacocoHtml/index.html"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // minimum percentage of code coverage
                minimum = 0.7
            }
        }
        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

// Fail the build if code coverage isn't high enough
check.dependsOn jacocoTestCoverageVerification

// Run code coverage after tests run
jacocoTestReport.mustRunAfter test


task doAll {
    // Runs a java build. Imported from the java plugin
    dependsOn build
    // Runs all the tests. Imported from the java plugin.
//    dependsOn test
    // Runs pmd. Imported by pmd plugin
    dependsOn check
    // Runs java doc. Imported from the java plugin
    dependsOn javadoc
    println 'all done!'
}

//test {
//    useJUnitPlatform()
//    finalizedBy jacocoTestReport
//    filter {
//        includeTestsMatching "ChatroomClientTest"
//    }
//}

task rc(type: JavaExec) {
    main = 'client.ChatroomClient'  
    classpath = sourceSets.main.runtimeClasspath
    args '127.0.0.1', '12345'  
    // args '<the server's ip address>', '12345'  
    standardInput = System.in
    standardOutput = System.out
}

task rs(type: JavaExec) {
    main = 'server.ChatroomServer'
    classpath = sourceSets.main.runtimeClasspath
    args '12345'
    standardInput = System.in
    standardOutput = System.out
}